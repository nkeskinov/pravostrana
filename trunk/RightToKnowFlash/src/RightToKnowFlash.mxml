<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:righttoknow="org.most.righttoknow.*"
			   xmlns:components="org.most.righttoknow.components.*"
			   xmlns:bubbleentriesservice="services.bubbleentriesservice.*"
			   xmlns:ammap="http://www.ammap.com/com_internal"
			   xmlns:controls="org.most.righttoknow.controls.*"
			   xmlns:entrysetsservice="services.entrysetsservice.*"
			   xmlns:local="*" 
			   xmlns:municipalitiesservice="services.municipalitiesservice.*"
			   width="690" height="430" applicationComplete="init()" horizontalCenter="0"
			   verticalCenter="0"> 
	<fx:Script>  
		<![CDATA[
			import flashx.textLayout.formats.Float;
			
			import mx.charts.AxisRenderer;
			import mx.charts.BubbleChart;
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.LinearAxis;
			import mx.charts.LogAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.LineSeries;
			import mx.charts.series.items.BubbleSeriesItem;
			import mx.charts.series.items.LineSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.effects.AnimateProperty;
			import mx.effects.easing.Back;
			import mx.effects.easing.Bounce;
			import mx.effects.easing.Elastic;
			import mx.effects.easing.Linear;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.SliderEvent;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			import mx.graphics.Stroke;
			import mx.managers.PopUpManager;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.rpc.events.ResultEvent;
			
			import org.most.righttoknow.components.DisclaimerTitleWindow;
			import org.most.righttoknow.components.HelpTitleWindow;
			import org.most.righttoknow.components.ShareTitleWindow;
			import org.most.righttoknow.components.TeaserTitleWindow;
			import org.most.righttoknow.controls.StyledAxisRenderer;
			import org.most.righttoknow.controls.YouTubePlayerAS3;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			protected var youTubeService:YouTubePlayerAS3;
			
			public var bulletSizeValue:Number = 10;
			
			[Bindable]
			protected var chartDataProvider:ArrayCollection;
			
			protected var originalData:ArrayCollection;
			protected var prevData:ArrayCollection;
			protected var arrData:ArrayCollection;
			
			[Bindable]
			protected var bubbleSeriesProvider:ArrayCollection;
			
			[Bindable]
			public var menuXaxis:XMLListCollection;
			public var menuYaxis:XMLListCollection;
			private var menubarXML:XMLList;
			
			
			[Bindable]
			public var xmlData:XML;
			
			protected var menuX:Menu;
			protected var menuX1:Menu;
			protected var menuY:Menu;
			protected var menuY1:Menu;
			
			protected var xSelected:Number;
			protected var ySelected:Number;
			protected var xSelected1:Number;
			protected var ySelected1:Number;
			protected var zSelected:Number;
			
			[Bindable]
			protected var maxXValue:Number;
			[Bindable]
			protected var maxYValue:Number;
			
			private var chartCanReset:Boolean = false;
			
			[Bindable]
			private var fullScreenState:String;
			
			
			[Bindable]
			public var allCities:ArrayCollection;
			
			protected var menuZ:Menu;
			
			protected var filtered:Boolean = false;
			
			protected static var DEFAULT_SIZE:Number = 10;
			protected static var MIN_SIZE:Number = 5;
			protected static var MAX_SIZE:Number = 15;
			
			[Bindable]
			protected var minSize:Number = MIN_SIZE;
			[Bindable]
			protected var maxSize:Number = MAX_SIZE;
			
			// Classes for icons
			[Embed(source='assets/full_screen.png')]
			public static var fullInIcn:Class;
			[Embed(source='assets/normal_screen.png')]
			public static var fullOutIcn:Class;
			[Embed(source='assets/play_blue.png')]
			public static var playBtnIcn:Class;
			[Embed(source='assets/pause_blue.png')]
			public static var pauseBtnIcn:Class;
			
			[Embed(source="assets/large_window2.png")]
			public static var largeWindowIcn:Class;
			[Embed(source="assets/small_window.png")]
			public static var smallWindowIcn:Class;
			
			
			[Embed(source="assets/help.png")]
			public static var helpIcn:Class;
			[Embed(source="assets/icon_terms01.png")]
			public static var termsIcn:Class;
			[Embed(source="assets/get_info.png")]
			public static var aboutIcn:Class;
			
			
			protected var playing:Boolean = false;
			
			protected var minYear:Number;
			protected var maxYear:Number;
			
			[Bindable]
			protected var playDuration:Number = 3;
			[Bindable]
			protected var animProp:AnimateProperty = new AnimateProperty();
			
			[Bindable]
			protected var mapPrimaryLabel:String;
			[Bindable]
			protected var mapOverlayLabel:String;
			
			protected var xAxisType:String;
			protected var yAxisType:String;
			[Bindable]
			protected var defaultTab:Number = 0;
			
			protected var mapLoaded:Boolean = false;
			
			[Bindable]
			protected var selectionMenuDP:Array;
			[Bindable]
			protected var helpMenuDP:Array;
			
			protected var isFirstTime:Boolean = true;
			
			/**
			 * Start up function
			 * */
			private function init():void {
				fullScreenState = stage.displayState;
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, stage_fullScreen);		
				
				getAllMunicipalities();
				resourceManager.localeChain = ['mk_MK'];
			
				var titleWindowInstance:TeaserTitleWindow = TeaserTitleWindow(PopUpManager.createPopUp(this, TeaserTitleWindow, false));
				titleWindowInstance.alpha = 0.4;
				PopUpManager.centerPopUp(titleWindowInstance);
				
				helpMenuDP=[
					{	data:"help",
						label:resourceManager.getString('resources', 'help_menu_help'),
						label_en:resourceManager.getString('resources', 'help_menu_help_en'),
						label_sq:resourceManager.getString('resources', 'help_menu_help_sq'),
						icon:helpIcn
					},
					{	data:"methodology",
						label:resourceManager.getString('resources', 'help_menu_methodology'),
						label_en:resourceManager.getString('resources', 'help_menu_methodology_en'),
						label_sq:resourceManager.getString('resources', 'help_menu_methodology_sq')
					},
					{	data:"terms",
						label:resourceManager.getString('resources', 'help_menu_terms'),
						label_en:resourceManager.getString('resources', 'help_menu_terms_en'),
						label_sq:resourceManager.getString('resources', 'help_menu_terms_sq'),
						icon:termsIcn
					},
					{	data:"about",
						label:resourceManager.getString('resources', 'help_menu_about'),
						label_en:resourceManager.getString('resources', 'help_menu_about_en'),
						label_sq:resourceManager.getString('resources', 'help_menu_about_sq'),
						icon:aboutIcn
					}
				];
				
				
				selectionMenuDP = [
					{	data:"areaAll",
					 	label:resourceManager.getString('resources', 'all_cities_label'),
					 	label_en:resourceManager.getString('resources', 'all_cities_label_en'),
					 	label_sq:resourceManager.getString('resources', 'all_cities_label_sq'),
					 	type:"check",
					 	toggled:false
					},
					{	data:"areaSkopje",
						label:resourceManager.getString('resources', 'skopje_label'),
						label_en:resourceManager.getString('resources', 'skopje_label_en'),
						label_sq:resourceManager.getString('resources', 'skopje_label_sq'),
						type:"check",
						toggled:false
					}];
				
				
				
				
				
			}
			
			/**
			 * Click handler for the full screen
			 * */
			protected function fullScreenBtn_clickHandler(event:MouseEvent):void
			{
				if(fullScreenBtn.selected)
					fullScreenBtn.setStyle("icon",fullOutIcn);
				else
					fullScreenBtn.setStyle("icon",fullInIcn);
				
				if (isFullScreen()) {
					fullScreenState = StageDisplayState.NORMAL;
					
				} else {
					fullScreenState = StageDisplayState.FULL_SCREEN;
					this.percentWidth = 100;
					this.percentHeight = 100;
					
				}
				
				try {
					stage.displayState = fullScreenState;
				} catch (any:*) {
					// ignore
				}
				
			}
			
			private function isFullScreen():Boolean {
				return (stage.displayState == StageDisplayState.FULL_SCREEN);
			}
			
			private function stage_fullScreen(evt:FullScreenEvent):void {
				player.percentWidth = 100;
				player.percentHeight = 100;
				fullScreenBtn.selected = isFullScreen();
			}
			
			
			
			protected function shareBtn_clickHandler(event:MouseEvent):void
			{
				var titleWindowInstance:ShareTitleWindow = ShareTitleWindow(PopUpManager.createPopUp(this, ShareTitleWindow, false));
				
				PopUpManager.centerPopUp(titleWindowInstance);
			}
			
		
			
			protected function getAllMunicipalitiesResult_resultHandler(event:ResultEvent):void
			{
				//allCities = getAllMunicipalitiesResult.lastResult;
				busyIndicator1.busy = true;
				allCities = new ArrayCollection();
				var tmpArray:ArrayCollection = getAllMunicipalitiesResult.lastResult;
				for(var i:int =0; i<tmpArray.length; i++){
					var item:Object = tmpArray.getItemAt(i);
					var o:Object = {id:i, label:item.name, label_en:item.name_en, label_sq:item.name_sq, dataField:item.id_municipality, isSelected:false};
					allCities.addItem(o);
				}
				busyIndicator1.busy = false;
			}
		
			/**
			 * Service Call for the EntrysetService
			 * */
			protected function getEntrySetMenu():void
			{
				getEntrySetMenuResult.token = entrysetsService.getEntrySetMenu();
			}
			
			
			/**
			 * Utility function to format years retrieved as int-s from DB.
			 */
			protected function formatYear(value:Number):Object
			{
				return numberformater.format(value);
			}
			
			/**
			 * Result handler for the BubbleEntriesPerYEarByIds web method
			 * 
			 * */
			protected function getBubbleEntriesPerYearByIdsResult_resultHandler(event:ResultEvent):void
			{ 
				showBusyCursor();
				chartDataProvider = getBubbleEntriesPerYearByIdsResult.lastResult.rows;
				//Save the original data for reseting purposes
				originalData = chartDataProvider;
				
				var tmpArrayCollection:ArrayCollection = new ArrayCollection();
				for each(var item:Array in chartDataProvider){
					
					var k:ArrayCollection =new ArrayCollection(item);
					
					var t1:ArrayCollection = new ArrayCollection();
					//Do not include "Grad Skopje"
					//for(var i:int = 0; i<allCities.length; i++){
						for(var j:int=0; j<k.length; j++){
							if(k.getItemAt(j).id_municipality!=85){
								t1.addItem(k.getItemAt(j));
							}else{
								//Alert.show("GradSkopje="+k.getItemAt(j).name);
								t1.addItem(new Object());
							}
						}
					//}
					//Alert.show("k="+k.getItemAt(0).id_municipality);
					tmpArrayCollection.addItem(t1);
				}
				chartDataProvider = tmpArrayCollection;
				
				
				
				
				
				//Min and max year
				minYear = getBubbleEntriesPerYearByIdsResult.lastResult.minYear;
				maxYear = getBubbleEntriesPerYearByIdsResult.lastResult.maxYear;
				
				hSlider.minimum = minYear;
				hSlider.maximum = maxYear;
				
				hSlider.labels = new Array(maxYear - minYear + 1);
				
				for (var i:int = minYear; i <= maxYear; i++) {
					hSlider.labels[i - minYear] = i;
				}
				
				maxXValue= getBubbleEntriesPerYearByIdsResult.lastResult.maxXValue;
				maxYValue= getBubbleEntriesPerYearByIdsResult.lastResult.maxYValue;
				chartBgLabel.visible = true;
				if(isFirstTime){
					if(xAxisType == "log"){
						var logAxis:LogAxis = new LogAxis();
						logAxis.baseAtZero = false;
						logAxis.minimum = 0;
						logAxis.maximum = maxXValue;
						chart.horizontalAxis = logAxis;				
					}
					else if(xAxisType == "lin"){
						var linAxis:LinearAxis = new LinearAxis();
						linAxis.baseAtZero = false;
						linAxis.minimum = 0;
						linAxis.maximum = maxXValue;
						chart.horizontalAxis = linAxis;
					}
					
					if(yAxisType == "log"){
						var logAxis:LogAxis = new LogAxis();
						logAxis.baseAtZero = false;
						logAxis.minimum = 0;
						logAxis.maximum = maxYValue;
						chart.verticalAxis = logAxis;				
					}
					else if(yAxisType == "lin"){
						var linAxis:LinearAxis = new LinearAxis();
						linAxis.baseAtZero = false;
						linAxis.minimum = 0;
						linAxis.maximum = maxYValue;
						chart.verticalAxis = linAxis;
					}
					isFirstTime = false;
				}
				hideBusyCursor();
			}
			
			/**
			 * Service call for the web method getBubbleEntriesPerYearById's
			 **/
			protected function getBubbleEntriesPerYearByIds(x_axis:int, y_axis:int, z_axis:int):void
			{
				getBubbleEntriesPerYearByIdsResult.token = bubbleEntriesService.getBubbleEntriesPerYearByIds(x_axis, y_axis, z_axis);
			}
			
			/**
			 * Call the web method that initialize the menu, on the menu creation
			 * */
			protected function xAxisPopup_creationCompleteHandler(event:FlexEvent):void
			{
				getEntrySetMenu();
			}
			
			/**
			 * Click handler of the X axis button
			 * */
			protected function xAxisPopup_clickHandler(event:MouseEvent):void
			{
				
				menuX.show(chart.x+37, chart.y+chart.height-15);
			}
			
			/**
			 * Click handler of the X axis button
			 * */
			protected function xAxisPopup1_clickHandler(event:MouseEvent):void
			{
				
				menuX1.show(tabNav.x+tabNav.width+21, tabNav.y+232);
				
			}
			
			/**
			 * Click handler of the Y axis button
			 * */
			
			protected function yAxisPopup_clickHandler(event:MouseEvent):void
			{
				menuY.show(chart.x+37, chart.y+120);
				
			}
			
			/**
			* Click handler of the Y axis button
			* */
				
			protected function yAxisPopup1_clickHandler(event:MouseEvent):void
			{
				menuY1.show(tabNav.x+tabNav.width+21, tabNav.y+282);
				
			}
			
			protected function zAxisPopup_clickHandler(event:MouseEvent):void
			{
				menuZ.show(chart.width+42, chart.height+58);
			}
			
			protected function xAxisPopup1_creationCompleteHandler(event:FlexEvent):void
			{
				//mapPrimaryLabel = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_y_label')];
				//mapOverlayLabel = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_x_label')];
				
			}
			
			/**
			 * Click handler for the menu on the X axis
			 * */
			private function menuZitemClick(event:MenuEvent):void {
				
				zAxisPopup.label = event.item[resourceManager.getString('resources', 'menu_label_field')]+"***";
				zSelected = event.item.id;
				if(zSelected == 0){
					
					minSize = DEFAULT_SIZE;
					maxSize = DEFAULT_SIZE;
					bubbleSizeHSlider.thumbCount = 1;
					bubbleSizeHSlider.setThumbValueAt(0,DEFAULT_SIZE);
				}else{
					minSize = MIN_SIZE;
					maxSize = MAX_SIZE;
					bubbleSizeHSlider.thumbCount = 2;
					bubbleSizeHSlider.setThumbValueAt(0,MIN_SIZE);
					bubbleSizeHSlider.setThumbValueAt(1,MAX_SIZE);
					getBubbleEntriesPerYearByIds(xSelected, ySelected, zSelected);
					
				}
			}
			
			/**
			 * Click handler for the menu on the X axis
			 * */
			private function menuXitemClick(event:MenuEvent):void {
				
				xAxisPopup.label = event.item[resourceManager.getString('resources', 'menu_label_field')]+"**";
				xSelected = event.item.id
				getBubbleEntriesPerYearByIds(xSelected, ySelected, zSelected);
				
			}
			
			/**
			 * Click handler for the menu on the X1 axis
			 * */
			private function menuX1itemClick(event:MenuEvent):void {
				
				mapPrimaryLabel= event.item[resourceManager.getString('resources', 'menu_label_field')];
				xSelected1 = event.item.id
				mapChart.init(xSelected1, ySelected1, mapPrimaryLabel, mapOverlayLabel);
				
			}
			
			/**
			 * Click handler for the menu on the X axis
			 * */
			private function menuYitemClick(event:MenuEvent):void {
				
				yAxisPopup.label = event.item[resourceManager.getString('resources', 'menu_label_field')]+"*";
				ySelected = event.item.id;
				getBubbleEntriesPerYearByIds(xSelected, ySelected, zSelected);
				//Alert.show("x="+xSelected +" y="+event.item.id);
			}
			
			/**
			 * Click handler for the menu on the X axis
			 * */
			private function menuY1itemClick(event:MenuEvent):void {
				
				mapOverlayLabel = event.item[resourceManager.getString('resources', 'menu_label_field')];
				ySelected1 = event.item.id;
				mapChart.init(xSelected1, ySelected1, mapPrimaryLabel, mapOverlayLabel);
				//Alert.show("x="+xSelected +" y="+event.item.id);
			}
			
						
			
			/**
			 * Result handler for the getEntrySetMenu web method
			 * */
			protected function getEntrySetMenuResult_resultHandler(event:ResultEvent):void
			{
				var menuData:Array = getEntrySetMenuResult.lastResult.menu;
				
				//Alert.show("menu="+menuData[0].label_sq);
				menuX = Menu.createMenu(null, menuData, false);
				menuX.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuX.addEventListener(MenuEvent.ITEM_CLICK, menuXitemClick);
				
				menuX1 = Menu.createMenu(null, menuData, false);
				menuX1.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuX1.addEventListener(MenuEvent.ITEM_CLICK, menuX1itemClick);
				menuX1.layoutDirection="rtl";

				 
				//Set the default_x and default_y
				xSelected = getEntrySetMenuResult.lastResult.default_x_id;
				ySelected = getEntrySetMenuResult.lastResult.default_y_id;
				zSelected = getEntrySetMenuResult.lastResult.default_z_id;
				
				xSelected1 = xSelected;
				ySelected1 = -1;
				
				
				menuY = Menu.createMenu(null, menuData, false);
				menuY.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuY.addEventListener(MenuEvent.ITEM_CLICK, menuYitemClick);
				
				menuY1 = Menu.createMenu(null, menuData, false);
				menuY1.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuY1.addEventListener(MenuEvent.ITEM_CLICK, menuY1itemClick);
				menuY1.layoutDirection="rtl";
				
				var tmpArr:ArrayCollection = new ArrayCollection();
				var item:Object = new Object;
				item.id = -1;
				item.label = resourceManager.getString('resources', 'z_indicators_label');
				item.label_en = resourceManager.getString('resources', 'z_indicators_label');
				item.label_sq = resourceManager.getString('resources', 'z_indicators_label');
				
				item.children = menuData;
				tmpArr.addItem(item);
				item = new Object;
				item.id=0;
				item.label = resourceManager.getString('resources', 'z_size_label');
				item.label_en = resourceManager.getString('resources', 'z_size_label');
				item.label_sq = resourceManager.getString('resources', 'z_size_label');
				tmpArr.addItem(item);
				
				
				menuZ = Menu.createMenu(null, tmpArr, false);
				menuZ.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuZ.layoutDirection="rtl";
				menuZ.addEventListener(MenuEvent.ITEM_CLICK, menuZitemClick);
				
				
				
				xAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_x_label')]+"**";
				yAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_y_label')]+"*";
				zAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_z_label')]+"***";
				
				mapPrimaryLabel = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_x_label')];
				mapOverlayLabel = resourceManager.getString('resources', 'map_overlay_none_label');
				 
				xAxisType = getEntrySetMenuResult.lastResult.x_axis;
				yAxisType = getEntrySetMenuResult.lastResult.y_axis;
				defaultTab = getEntrySetMenuResult.lastResult.default_tab;
				
				
				//Initialize the bubble chart with the default values 
				getBubbleEntriesPerYearByIds(xSelected, ySelected, zSelected);
			}
			
			/**
			 * Populate the data tip for each individual bubble
			 * */
			protected function dataTipFunction(hitData:HitData):String{
				
				return "<b>"+hitData.item[resourceManager.getString('resources', 'chart_label_field')]+"</b><br>"+xAxisPopup.label+": "+hitData.item.x+"<br>"+yAxisPopup.label+": "+hitData.item.y+"<br>"+zAxisPopup.label+": "+hitData.item.z;
				
			}
			
			
			/**
			 * The change handler of the chart
			 * */
			protected function chart_changeHandler(event:ChartItemEvent):void
			{
				//Still to be corected
				/*
				var bc:BubbleChart = event.target as BubbleChart;
				
				
				for each (var bs:BubbleSeries in bc.series)
				{
					var ac:ArrayCollection = new ArrayCollection();
					var dp:ArrayCollection = bs.dataProvider as ArrayCollection;
					//var tmpMinX:Number = maxXValue;
					//var tmpMinY:Number = maxYValue;
					//var tmpMaxX:Number = 0;
					//var tmpMaxY:Number = 0;
					for each (var bsi:BubbleSeriesItem in bs.selectedItems)
					{
						//if(bsi.item.x < tmpMinX)
							//tmpMinX = bsi.item.x;
						//if(bsi.item.y < tmpMinY)
						//	tmpMinY = bsi.item.y;
						//if(bsi.item.x > tmpMaxX)
						//	tmpMaxX = bsi.item.x;
						//if(bsi.item.y > tmpMaxY)
						//	tmpMaxY = bsi.item.y;
						ac.addItem(bsi.item);
						
					}
					//var logAxis:LogAxis = new LogAxis();
					//logAxis.minimum = tmpMinX-100;
					//logAxis.maximum = tmpMaxX+100;
					
					//var linAxis:LinearAxis = new LinearAxis();
					//linAxis.minimum = tmpMinY-1000;
					//linAxis.maximum = tmpMaxY+1000;
					
					//chart.horizontalAxis = logAxis;
					//chart.verticalAxis = linAxis;
					bs.dataProvider = ac;
				}
				
				bc.clearSelection();
				chartCanReset = true;
				*/
			}
			
			protected function chart_doubleClickHandler(event:MouseEvent):void
			{
				if(chartCanReset)
				{
					var bc:BubbleChart = event.target as BubbleChart;
					for (var i:int = 0; i < bc.series.length; i++)
					{
						var bs:BubbleSeries = bc.series[i] as BubbleSeries;
						bs.dataProvider =  chartDataProvider.getItemAt(hSlider.value - hSlider.minimum);
					}
					chartCanReset = false;
				}
			}
			
			private function bubbleSeriesFillFunction(item:ChartItem, index:Number):IFill {
				return new SolidColor(0xffffff*(item.item.id_municipality)*0.001, 0.4);
			}

			
			/**
			 * Change the y axis from log to lin and vice versa
			 * */
			protected function yToggle_clickHandler(event:MouseEvent):void
			{
				if(yToggle.selected){
					var logAxis:LogAxis = new LogAxis();
					logAxis.baseAtZero = false;
					logAxis.minimum = 0;
					logAxis.maximum = maxYValue;
					chart.verticalAxis = logAxis;				
				}
				else{
					var linAxis:LinearAxis = new LinearAxis();
					linAxis.baseAtZero = false;
					linAxis.minimum = 0;
					linAxis.maximum = maxYValue;
					chart.verticalAxis = linAxis;
				}
			}
			
			/**
			 * Change the x axis from log to lin and vice versa
			 * */
			protected function xToggle_clickHandler(event:MouseEvent):void
			{
				if(xToggle.selected){
					var logAxis:LogAxis = new LogAxis();
					logAxis.baseAtZero = false;
					logAxis.minimum = 0;
					logAxis.maximum = maxXValue;
					chart.horizontalAxis = logAxis;
				}
				else {
					var linAxis:LinearAxis = new LinearAxis();
					linAxis.baseAtZero = false;
					linAxis.minimum = 0;
					linAxis.maximum = maxXValue;
					chart.horizontalAxis = linAxis;
				}
			}
			
			
			protected function getAllMunicipalities():void
			{
				getAllMunicipalitiesResult.token = municipalitiesService.getAllMunicipalities();
			}
			
			
			
			public function filter():void{
				
				//if(filtered){
					chartDataProvider = originalData;
				//}
				var tmpArrayCollection:ArrayCollection = new ArrayCollection();
				for each(var item:Array in chartDataProvider){
					
					var k:ArrayCollection =new ArrayCollection(item);
					k.filterFunction = customFilterFunction;
					k.refresh();
					// This is to keep the order of the data in the data provider
					// So the interpolate effect in the data chart wont distort
					var t1:ArrayCollection = new ArrayCollection();
					for(var i:int = 0; i<allCities.length; i++){
						if(allCities.getItemAt(i).isSelected){
							for(var j:int=0; j<k.length; j++){
								if(allCities.getItemAt(i).dataField == k.getItemAt(j).id_municipality)
									t1.addItemAt(k.getItemAt(j),i);
							}
						} 
						else{
							t1.addItemAt(new Object(),i);
						}
					}
						
					//Alert.show("k="+k.getItemAt(0).id_municipality);
					tmpArrayCollection.addItem(t1);
				}
				chartDataProvider = tmpArrayCollection;
				
				
			}
			
			private function customFilterFunction(item:Object):Boolean{
				
				var bool:Boolean = false;
				
				for(var i:int=0; i<allCities.length; i++){
					if(allCities.getItemAt(i).isSelected && allCities.getItemAt(i).dataField == item.id_municipality)
					{	
						bool = true;
					}
				}
				filtered = true;
				return bool;
			}
			
			
			protected function checkAllCities_clickHandler(event:MouseEvent):void
			{
				/*
				if(checkAllCities.selected){
					for(var i:int=0; i<allCities.length; i++){
						allCities.getItemAt(i).isSelected = true;
						
					}
				}else{
					for(var i:int=0; i<allCities.length; i++){
						allCities.getItemAt(i).isSelected = false;
					}
				}
				
				list.dataProvider = allCities;
				chartDataProvider = originalData;
				*/
			}
			
			
			
			
			
			protected function bubbleSizeHSlider_changeHandler(event:SliderEvent):void
			{
				 
				if(bubbleSizeHSlider.thumbCount==2){
					minSize = bubbleSizeHSlider.values[0];
					maxSize = bubbleSizeHSlider.values[1];
				}else{
					minSize = bubbleSizeHSlider.values[0];
					maxSize = bubbleSizeHSlider.values[0];
				}
				
				//Alert.show("max="+maxSize);
			}
			
			protected function playBtn_clickHandler(event:MouseEvent):void
			{
				
				if(!playing){
					if(hSlider.value == maxYear){
						hSlider.value = minYear;
						
					}
					playing = true;
					playBtn.setStyle("icon",pauseBtnIcn);
					
					//hSlider.setStyle("slideDuration", 0);
					//hSlider.setStyle("slideEasingFunction", Linear.easeNone);
					
					hSlider.snapInterval = 0;
					hSlider.mouseChildren = false;
					hSlider.mouseEnabled = false;
					animateSlider.duration = playDuration*(maxYear-minYear)*1000;
					animateSlider.fromValue = hSlider.value;
					
					animateSlider.play(null,false);
					
					//timer = new Timer(1);
					//timer.addEventListener("timer", playTimeline);
					//timer.start();
				}else{
					
					playing = false;
					playBtn.setStyle("icon",playBtnIcn);
					hSlider.mouseEnabled = true;
					hSlider.mouseChildren = true;
					hSlider.snapInterval = 1;
					animateSlider.stop();
					animateSlider.fromValue = hSlider.value;
					//animateSlider.fromValue = minYear;
					
				}
				
			}
			
			protected function playSpeed_changeHandler(event:SliderEvent):void
			{
				
				if(playing){
					playDuration = playSpeed.value;
					animateSlider.stop();
					animateSlider.fromValue = hSlider.value;
					animateSlider.duration = playDuration*(maxYear-minYear)*1000
					animateSlider.play();
					//Alert.show("playDuration="+playDuration);
					//timer.stop();
					//timer = new Timer(1);
					//timer.addEventListener("timer", playTimeline);
					//timer.start();
					//animateProperty.duration = 6000 * playSpeed.value;
				}
				
			}
			private function playTimeline(e:TimerEvent):void{
				//Alert.show("Test="+timelineSlider.value);
				if(hSlider.value == maxYear){
					playing = false;
					playBtn.setStyle("icon",playBtnIcn);
				}
			} 

			
			protected function hSlider_valueCommitHandler(event:FlexEvent):void
			{
				chartBgLabel.text =numberformater.format(hSlider.value-1);
				if(hSlider.value == maxYear && playing){
					playing = false;
					playBtn.setStyle("icon",playBtnIcn);
					hSlider.snapInterval = 1;
					animateSlider.stop();
					animateSlider.fromValue = minYear;
					hSlider.mouseEnabled = true;
					hSlider.mouseChildren = true;
					chartBgLabel.text =numberformater.format(hSlider.value);
				}
						
			}
			protected function busyIndicator_initializeHandler(event:FlexEvent):void
			{
				busyIndicator.setStyle("source", "assets/animation11.swf");
				busyIndicator.setStyle("scale", false);
			}
			
			protected function busyIndicator1_initializeHandler(event:FlexEvent):void
			{
				busyIndicator1.setStyle("source", "assets/animation18.swf");
				busyIndicator1.setStyle("scale", false);
			}
			
			public function hideBusyCursor():void{
				busyIndicator.busy = false;
			}
			
			public function showBusyCursor():void{
				busyIndicator.busy = true;
			}
			
			protected function langList_changeHandler(event:IndexChangeEvent):void
			{
				
				resourceManager.localeChain = [langList.selectedItem.id];
				
				menuX.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuY.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuZ.labelField=resourceManager.getString('resources', 'menu_label_field');
				
				var tmpArr:ArrayCollection = new ArrayCollection();
				var item:Object = new Object;
				item.id = -1;
				item.label = resourceManager.getString('resources', 'z_indicators_label');
				item.label_en = resourceManager.getString('resources', 'z_indicators_label');
				item.label_sq = resourceManager.getString('resources', 'z_indicators_label');
				
				item.children = getEntrySetMenuResult.lastResult.menu;;
				tmpArr.addItem(item);
				item = new Object;
				item.id=0;
				item.label = resourceManager.getString('resources', 'z_size_label');
				item.label_en = resourceManager.getString('resources', 'z_size_label');
				item.label_sq = resourceManager.getString('resources', 'z_size_label');
				tmpArr.addItem(item);
				
				
				menuZ = Menu.createMenu(null, tmpArr, false);
				menuZ.labelField=resourceManager.getString('resources', 'menu_label_field');
				menuZ.layoutDirection="rtl";
				menuZ.addEventListener(MenuEvent.ITEM_CLICK, menuZitemClick);
				
				
				xAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_x_label')]+"**";
				yAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_y_label')]+"*";
				zAxisPopup.label = getEntrySetMenuResult.lastResult[resourceManager.getString('resources', 'default_z_label')]+"***";
				
				//p1.label = resourceManager.getString('resources', 'all_cities_label_en');
				p1.labelFunction = popUpMenuButton_labelFunc;
				p1.dataProvider = selectionMenuDP;
				
				helpMenu.labelFunction = popUpMenuButton_labelFunc;
				helpMenu.dataProvider = helpMenuDP;
				
			}
			
			
			protected function tabNav_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				if(tabNav.selectedIndex==0)
					this.currentState="State1";
				else{
					this.currentState="MapState";
					if(!mapLoaded){
						mapChart.init(xSelected1, ySelected1, mapPrimaryLabel, mapOverlayLabel);
						mapLoaded = true;
					}
				}
			}
			
			protected function p1_itemClickHandler(event:MenuEvent):void
			{
				
				if(event.item.data=="areaAll"){
					selectionMenuDP[1].toggled=false;
					if(event.item.toggled){
						for(var i:int=0; i<allCities.length; i++){
							allCities.getItemAt(i).isSelected = true;
							
						}
					}else{
						for(var i:int=0; i<allCities.length; i++){
							allCities.getItemAt(i).isSelected = false;
						}
					}
					
					list.dataProvider = allCities;
					chartDataProvider = originalData;
				}else if(event.item.data=="areaSkopje"){
					selectionMenuDP[0].toggled=false;
					if(event.item.toggled){
						for(var j:int=0; j<allCities.length; j++){
							allCities.getItemAt(j).isSelected = false;
						}
						allCities.getItemAt(0).isSelected = true;
						allCities.getItemAt(1).isSelected = true;
						allCities.getItemAt(9).isSelected = true;
						filter();
						
					}else{
						for(var j:int=0; j<allCities.length; j++){
							allCities.getItemAt(j).isSelected = false;
						}
						chartDataProvider = originalData;
					}
					
					list.dataProvider = allCities;
					
				}
				
			}
			
			private function popUpMenuButton_labelFunc(item:Object):String {
				return item[resourceManager.getString('resources', 'menu_label_field')];
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				var titleWindowInstance:DisclaimerTitleWindow = DisclaimerTitleWindow(PopUpManager.createPopUp(this, DisclaimerTitleWindow, false));
				titleWindowInstance.title=resourceManager.getString('resources', 'disclaimer_window_title');
				titleWindowInstance.setText(resourceManager.getString('resources', 'disclaimer_text'));
				PopUpManager.centerPopUp(titleWindowInstance);
			}
			
			
			protected function helpMenu_itemClickHandler(event:MenuEvent):void
			{
				if(event.item.data=="help"){
					var titleWindowInstance:HelpTitleWindow = HelpTitleWindow(PopUpManager.createPopUp(this, HelpTitleWindow, false));
					titleWindowInstance.title=resourceManager.getString('resources', 'help_window_title');
					PopUpManager.centerPopUp(titleWindowInstance);
				
				}else if(event.item.data=="terms"){
					var titleWindowInstance1:DisclaimerTitleWindow = DisclaimerTitleWindow(PopUpManager.createPopUp(this, DisclaimerTitleWindow, false));
					titleWindowInstance1.title=resourceManager.getString('resources', 'terms_window_title');
					titleWindowInstance1.setText(resourceManager.getString('resources', 'terms_text'));
					PopUpManager.centerPopUp(titleWindowInstance1);
				
				}else if(event.item.data=="methodology"){
					var titleWindowInstance2:DisclaimerTitleWindow = DisclaimerTitleWindow(PopUpManager.createPopUp(this, DisclaimerTitleWindow, false));
					titleWindowInstance2.title=resourceManager.getString('resources', 'methodology_window_title');
					titleWindowInstance2.setText(resourceManager.getString('resources', 'methodology_text'));
					PopUpManager.centerPopUp(titleWindowInstance2);
				
				}else if(event.item.data=="about"){
					var titleWindowInstance3:DisclaimerTitleWindow = DisclaimerTitleWindow(PopUpManager.createPopUp(this, DisclaimerTitleWindow, false));
					titleWindowInstance3.title=resourceManager.getString('resources', 'disclaimer_window_title');
					titleWindowInstance3.setText(resourceManager.getString('resources', 'about_text'));
					PopUpManager.centerPopUp(titleWindowInstance3);
				}
			}
			
			
			
						
			protected function togglebuttonbar1_itemClickHandler(event:ItemClickEvent):void
			{
				if(videoToggle.selectedIndex == 0){
					resetVideo.end();
					resetVideo.play();
					
				}else{
					resizeVideo.end();
					resizeVideo.play();
				}
			}
			
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace local "*";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.toggleSwitch
		{
			skinClass:ClassReference("org.most.righttoknow.skins.ToggleSwitchSkin");
		}
		mx|BubbleChart {
			horizontalAxisStyleName:myAxisStyles;
			verticalAxisStyleName:myAxisStyles;
		}
		
		.myAxisStyles {
			tickPlacement:none
		}
	</fx:Style>
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	<s:states>
		<s:State name="State1"/>
		<s:State name="MapState"/>
	</s:states>
	<fx:Declarations>
		
		<s:Resize id="resizeVideo" heightTo="322" widthTo="400" duration="200" 
				  targets="{[panel]}"/>
		<s:Resize id="resetVideo" heightTo="138" widthTo="155" duration="200" 
				  targets="{[panel]}" />
		<mx:AnimateProperty id="animateSlider" property="value" 
							fromValue="{getBubbleEntriesPerYearByIdsResult.lastResult.minYear}" 
							toValue="{getBubbleEntriesPerYearByIdsResult.lastResult.maxYear}" 
							easingFunction="Linear.easeNone" target="{hSlider}" />
		<bubbleentriesservice:BubbleEntriesService id="bubbleEntriesService"
												   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
												   />
		<s:CallResponder id="getBubbleEntriesPerYearByIdsResult" result="getBubbleEntriesPerYearByIdsResult_resultHandler(event)"/>
		
		
		<s:CallResponder id="getEntrySetMenuResult" result="getEntrySetMenuResult_resultHandler(event)"/>
		<entrysetsservice:EntrysetsService id="entrysetsService"
										   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
										   showBusyCursor="true"/>
		
		<mx:SeriesInterpolate id="interpolateIn" duration="{playSpeed.value*1000}" hideFocusRing="true" 
							  perElementOffset="0" elementOffset="0" easingFunction="Linear.easeNone"
							  suspendBackgroundProcessing="false" />
		<s:CallResponder id="getAllMunicipalitiesResult" result="getAllMunicipalitiesResult_resultHandler(event)"/>
		<municipalitiesservice:MunicipalitiesService id="municipalitiesService"
													 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
													 />

		<mx:SolidColorStroke id="stroke1" color="blue" weight="0.5" alpha="0.3"/>
		<mx:NumberFormatter  id="numberformater" rounding="up" precision="0" thousandsSeparatorFrom="" thousandsSeparatorTo=""/>
	</fx:Declarations>
		
		<s:HGroup left="10" right="10" top="10" bottom="10" gap="3" width="100%" height="100%">
			<s:VGroup height="100%" gap="3" width="100%">
				<mx:TabNavigator id="tabNav" width="100%" height="100%" 
								 paddingBottom="0" paddingLeft="0" paddingRight="0"
								 change="tabNav_changeHandler(event)"
								 selectedIndex="{defaultTab}" >
					<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources', 'tab_chart_title')}">
						<controls:BusyIndicator id="busyIndicator" busy="true" width="100%" height="100%" 
												initialize="busyIndicator_initializeHandler(event)" >
							
						
							<s:Group width="100%" height="100%" top="-10">
								<s:Panel width="100%" height="100%" borderVisible="false" dropShadowVisible="false"
										 skinClass="org.most.righttoknow.skins.TitlelessPanel">
									<s:HGroup width="100%" height="100%" gap="0" paddingLeft="5" paddingBottom="5">
										<s:Group  height="100%" width="20">
										<s:VGroup width="100%" height="100%" bottom="-1" >
											
											<controls:ToggleSwitch id="yToggle" selected="{yAxisType=='log' ? true:false }" selectedLabel="log" deselectedLabel="lin" 
																   styleName="toggleSwitch" rotation="-90"
																    
																    click="yToggle_clickHandler(event)"/>
											<s:VGroup width="100%" height="100%" gap="-1">
												<s:Button id="yAxisPopup" left="0" height="100%" fontWeight="bold"
														  rotation="-90" click="yAxisPopup_clickHandler(event)"
														  cornerRadius="0" 
														  skinClass="org.most.righttoknow.skins.ButtonAsAList"></s:Button>
												<s:Button includeIn="State1" width="21" height="21"
														  label="Button"
														  click="button1_clickHandler(event)"
														  cornerRadius="0"
														  icon="@Embed('../assets/get_info.png')"/>
											</s:VGroup>
										</s:VGroup>
										</s:Group>
										
										<s:VGroup width="100%" height="100%" gap="0">
											<s:Group width="100%" height="100%">
												<mx:BubbleChart id="chart" x="0" y="0" width="100%" height="100%"
																change="chart_changeHandler(event)"
																dataTipFunction="dataTipFunction" 
																doubleClick="chart_doubleClickHandler(event)"
																doubleClickEnabled="true"
																minRadius="{minSize}"
																maxRadius="{maxSize}" 
																paddingRight="5" paddingTop="5" selectionMode="multiple"
																showDataTips="true" dataTipMode="single"
															    horizontalAxisStyleNames="linedNumericAxis"
																verticalAxisStyleNames="linedNumericAxis"
																clipContent="false"
																>
													
													<mx:series>
														<mx:BubbleSeries id="bubbleSeries"
																		 displayName="Series 1" 
																		 xField="x"
																		 yField="y"
																		 radiusField="z"
																		 showDataEffect="{interpolateIn}"
																		 dataProvider="{chartDataProvider.getItemAt( parseInt(numberformater.format(hSlider.value - hSlider.minimum)))}"		  
																		 fillFunction="bubbleSeriesFillFunction"
																		 stroke="{new SolidColorStroke(0x666666,1,0.6)}" />
													</mx:series>
													
													<mx:horizontalAxis>
														<mx:LogAxis  id="xAxis" minimum="0" maximum="{maxXValue}" baseAtZero="false" />
													</mx:horizontalAxis>
													
													<mx:verticalAxis>
														<mx:LinearAxis id="yAxis" minimum="0" maximum="{maxYValue}" baseAtZero="false" />
													</mx:verticalAxis>
													
													<mx:annotationElements>
														<controls:RangeSelector styleName="anno" />
										 			</mx:annotationElements>
													<mx:backgroundElements>
														<mx:GridLines horizontalShowOrigin="true"
																	  verticalShowOrigin="true"
																	  y="0" x="0" gridDirection="both"
																	  horizontalStroke="{new Stroke(0x666666,1,0.2)}"
																	  verticalStroke="{new Stroke(0x666666,1,0.2)}"
																	  />
														<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
															<s:Label id="chartBgLabel" text="{numberformater.format(hSlider.value)}" 
																	 verticalAlign="middle"
																	 alpha="0.2"  
																	 fontSize="128"
																	 color="#666666" visible="false"
																	 fontWeight="bold" />
														</s:HGroup>
														
													</mx:backgroundElements>
												</mx:BubbleChart> 
												
												
											</s:Group>
											<s:HGroup width="100%" height="20">
												<s:Button id="xAxisPopup" right="16" width="100%"
														  click="xAxisPopup_clickHandler(event)"
														  cornerRadius="0"
														  creationComplete="xAxisPopup_creationCompleteHandler(event)"
														  fontWeight="bold"
														  skinClass="org.most.righttoknow.skins.ButtonAsAList"/>
												<controls:ToggleSwitch id="xToggle" selected="{xAxisType=='log' ? true:false }" selectedLabel="log" 
																	   deselectedLabel="lin" styleName="toggleSwitch"
																	   click="xToggle_clickHandler(event)" />
											</s:HGroup>
										</s:VGroup>
										
									</s:HGroup>
									
									<s:controlBarContent>
										<s:HGroup x="0" y="0" width="100%" height="30" paddingLeft="5" verticalAlign="middle">
											<mx:Button id="playBtn" y="6" width="40" height="35"
													   icon="@Embed(source='assets/play_blue.png')"
													   click="playBtn_clickHandler(event)"
													    toolTip="{resourceManager.getString('resources', 'play_tooltip')}"/>
											<mx:VSlider id="playSpeed" height="40"
													    value="{playDuration}"
														change="playSpeed_changeHandler(event)"
														horizontalCenter="0" labelOffset="-1"
														liveDragging="true" maximum="6" minimum="1"
														rotation="-180" snapInterval="1"
														tickInterval="1" tickLength="10" tickOffset="4"
														toolTip="{resourceManager.getString('resources', 'playback_speed_tooltip')}"
														verticalCenter="0"/> 
											<mx:HSlider id="hSlider" y="2" width="100%" height="40"
														allowTrackClick="true" 
														dataTipFormatFunction="formatYear"
														labelOffset="-1"  
														showTrackHighlight="true"
														tickInterval="1" tickLength="10" tickOffset="4"
													    valueCommit="hSlider_valueCommitHandler(event)"
													    
													    />
											
										</s:HGroup>
									</s:controlBarContent>
								</s:Panel>
								
							</s:Group>
						</controls:BusyIndicator> 
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources', 'tab_map_title')}">
						<s:Group width="100%" height="100%" top="-10">
							<components:MapChartComponent id="mapChart" x="5" width="100%" height="100%" horizontalCenter="0">
							</components:MapChartComponent>
						</s:Group>
						<!--<s:Label id="yearLbl0" right="40" bottom="5" color="#ADADAD" fontSize="48"
								 fontWeight="bold" text="{timelineSlider.value}" textAlpha="0.35"/>-->
					</s:NavigatorContent>
					
				</mx:TabNavigator>
			</s:VGroup>
			
			<s:VGroup width="155" height="100%" gap="3">
				<s:Spacer height="138" width="150" />
				<s:Panel width="100%" height="100%" dropShadowVisible="false" fontSize="11"
						 fontWeight="normal" skinClass="org.most.righttoknow.skins.PanelSkin"
						
						 title.MapState="{resourceManager.getString('resources', 'map_set_panel_title')}">
					<controls:BusyIndicator id="busyIndicator1" busy="true" width="100%" height="100%" 
											initialize="busyIndicator1_initializeHandler(event)" >
						<mx:List id="list" includeIn="State1" y="0" width="100%" height="100%"
								 borderVisible="false" dataProvider="{allCities}" fontSize="10"
								 horizontalCenter="0" paddingBottom="0" paddingLeft="0"
								 paddingTop="0">
							<mx:itemRenderer>
								<fx:Component>
									<mx:CheckBox label="{data[resourceManager.getString('resources', 'cities_label_field')]}" change="onChange(event);"  paddingLeft="5" selected="{data.isSelected}">
										<fx:Script>
											<![CDATA[
												import mx.controls.Alert;
												private function onChange(evt:Event):void {     
													//Alert.show("Item clicked="+data.label +" id="+data.dataField+" ");
													//Alert.show("al="+outerDocument.allCities.getItemAt(data.dataField-1).label);
													var o:Object;
													if(selected){
														o = {id:data.id, label:data.label, label_en:data.label_en, label_sq:data.label_sq, dataField:data.dataField, isSelected:true};
													}else{
														o = {id:data.id, label:data.label, label_en:data.label_en, label_sq:data.label_sq, dataField:data.dataField, isSelected:false};
													}
													outerDocument.allCities.setItemAt(o,data.id);
													outerDocument.filter();
												}
												
											]]>
										</fx:Script>
										
									</mx:CheckBox>
								</fx:Component>
							</mx:itemRenderer> 
						</mx:List>
						<!--s:CheckBox id="checkAllCities" x="5" y="-19" toolTip="{resourceManager.getString('resources', 'check_allCities_tooltip')}" click="checkAllCities_clickHandler(event)" includeIn="State1"/-->					
						<s:VGroup includeIn="MapState" x="0" y="0" width="100%" height="100%"
								  paddingLeft="5" paddingRight="5" paddingTop="10">
							<s:HGroup width="100%" height="20" fontWeight="bold"
									  verticalAlign="middle">
								<s:Label text="{resourceManager.getString('resources', 'primary_data_label')}" />
							</s:HGroup>
							<s:BorderContainer width="100%" height="27" backgroundAlpha="0.8"
											   backgroundColor="#0024FF" borderVisible="false">
								<s:Button id="xAxisPopup1" width="97%" label="{mapPrimaryLabel}"
										  click="xAxisPopup1_clickHandler(event)" cornerRadius="0"
										  creationComplete="xAxisPopup1_creationCompleteHandler(event)"
										  fontWeight="bold" horizontalCenter="0"
										  skinClass="org.most.righttoknow.skins.ButtonAsAList"
										  verticalCenter="0"/>
							</s:BorderContainer>
							<s:Label fontWeight="bold"
									 text="{resourceManager.getString('resources', 'overlay_data_label')}"/>
							<s:BorderContainer width="100%" height="27" backgroundAlpha="0.8"
											   backgroundColor="#9bf6c9" borderVisible="false">
								<s:Button id="yAxisPopup1" width="97%" label="{mapOverlayLabel}"
										  click="yAxisPopup1_clickHandler(event)" cornerRadius="0"
										  fontWeight="bold" horizontalCenter="0"
										  skinClass="org.most.righttoknow.skins.ButtonAsAList"
										  verticalCenter="0"></s:Button>
							</s:BorderContainer>
						</s:VGroup>
						
							
					</controls:BusyIndicator>
					<mx:PopUpMenuButton id="p1" x="-1" y="-22" height="22" cornerRadius="0"
										includeIn="State1"
										width="155"	
										showRoot="true" 
										itemClick="p1_itemClickHandler(event)" 	
										dataProvider="{selectionMenuDP}"
										labelFunction="popUpMenuButton_labelFunc"	
										>
					</mx:PopUpMenuButton>
				</s:Panel>
				<!--s:Panel includeIn="State1" width="100%" height="90" dropShadowVisible="false"
						 skinClass="org.most.righttoknow.skins.PanelSkin"
						 title="{resourceManager.getString('resources', 'size_panel_title')}"-->
					<s:VGroup left="0" top="0" bottom="0" width="100%" includeIn="State1" gap="-1">
						<s:Button id="zAxisPopup" width="100%" click="zAxisPopup_clickHandler(event)"
								  cornerRadius="0" fontWeight="bold"
								  skinClass="org.most.righttoknow.skins.ButtonAsAList"
								 />
						<s:BorderContainer width="100%" height="100%" backgroundColor="#CACACA">
							
						
						<mx:HSlider id="bubbleSizeHSlider" width="150" 
								    change="bubbleSizeHSlider_changeHandler(event)"	
									allowTrackClick="true" thumbCount="2"
									liveDragging="true" values="{[MIN_SIZE,MAX_SIZE]}"  
									maximum="30" minimum="1" snapInterval="1"
								    labels="[5,10,15,20,25,30]" toolTip="{resourceManager.getString('resources', 'size_slider_tooltip')}"	
									tickInterval="1" tickLength="10" tickOffset="4" labelOffset="-1"/>
						</s:BorderContainer>
					</s:VGroup>
					
				<!--/s:Panel-->
				
			</s:VGroup> 
		</s:HGroup>
		<s:HGroup y="10" right="168" width="249" height="22" gap="2" horizontalAlign="right">
			<mx:PopUpMenuButton id="helpMenu" x="0" cornerRadius="0"
								width="120"	
								showRoot="true" 
								dataProvider="{helpMenuDP}"
							    itemClick="helpMenu_itemClickHandler(event)"	
								labelFunction="popUpMenuButton_labelFunc"	
								>
			</mx:PopUpMenuButton>
			
			<!--<mx:Button id="shareBtn" label="{resourceManager.getString('resources', 'share_button')}" click="shareBtn_clickHandler(event)"
					   fontSize="11" icon="@Embed(source='assets/share2.png')" paddingLeft="5"
					   paddingRight="5"/> -->
			<s:DropDownList id="langList" width="26" horizontalCenter="0"
							itemRenderer="spark.skins.spark.DefaultComplexItemRenderer"
							labelField="label" requireSelection="true"
							skinClass="org.most.righttoknow.skins.CustomDropDownListSkin"
							change="langList_changeHandler(event)"
							toolTip="{resourceManager.getString('resources', 'change_lang_tooltip')}"  >
				<s:dataProvider>
					<s:ArrayList>
						<s:BitmapImage source="@Embed('assets/mk_flag.png')" id="mk_MK"/>
						<s:BitmapImage source="@Embed('assets/us_flag.png')" id="en_US" />
						<s:BitmapImage source="@Embed('assets/al_flag.png')" id="sq_AL"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
			<s:ToggleButton  id="fullScreenBtn" width="21" height="21"
					  click="fullScreenBtn_clickHandler(event)"
					  icon="@Embed(source='assets/full_screen.png')"/>
		</s:HGroup>
		<s:Panel id="panel" right="10" top="10" width="155" height="138" dropShadowVisible="false"
				 fontSize="11" fontWeight="normal"
				 skinClass="org.most.righttoknow.skins.PanelSkin"
				 title="{resourceManager.getString('resources', 'video_panel_title')}"
				>
		<components:Player id="player"
						   width="100%" height="100%"/>
			<mx:ToggleButtonBar id="videoToggle" right="1"
							    width="60"
								top="-20"
							    height="18"
							     
							    itemClick="togglebuttonbar1_itemClickHandler(event)"	
							    toggleOnClick="false"	>
				<mx:dataProvider>  
					<fx:Object  icon="{smallWindowIcn}"/>
					<fx:Object icon="{largeWindowIcn}" />
							   
				</mx:dataProvider>
			</mx:ToggleButtonBar>
		</s:Panel>
</s:Application>
